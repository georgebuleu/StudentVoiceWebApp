// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentVoice.Persistance.Data;

namespace StudentVoice.Persistance.Data.Migrations
{
    [DbContext(typeof(StudentVoiceDbContext))]
    [Migration("20220720110006_SeedingManytoMany")]
    partial class SeedingManytoMany
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StudentVoice.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NotificationDate");

                    b.Property<string>("NotificationName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Notification");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("isSeen")
                        .HasColumnType("bit")
                        .HasColumnName("isSeen");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NotificationDate = new DateTime(2022, 7, 20, 14, 0, 5, 723, DateTimeKind.Local).AddTicks(6982),
                            NotificationName = "Question needs to be approved",
                            isSeen = false
                        },
                        new
                        {
                            Id = 2,
                            NotificationDate = new DateTime(2022, 7, 20, 14, 0, 5, 723, DateTimeKind.Local).AddTicks(8071),
                            NotificationName = "A student answered a question",
                            isSeen = true
                        },
                        new
                        {
                            Id = 3,
                            NotificationDate = new DateTime(2022, 7, 20, 14, 0, 5, 723, DateTimeKind.Local).AddTicks(8089),
                            NotificationName = "Your qustion was aproved",
                            isSeen = true
                        });
                });

            modelBuilder.Entity("StudentVoice.Domain.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("QuestionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("SurveyId")
                        .HasColumnType("int");

                    b.Property<string>("TextField")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QuestionName = "Please rate this class.",
                            Rating = 8,
                            TextField = ""
                        },
                        new
                        {
                            Id = 2,
                            QuestionName = "What is something you liked about this class?",
                            Rating = -1,
                            TextField = "I really liked the fact that this class focused more on the quality of code than the quantity"
                        },
                        new
                        {
                            Id = 3,
                            QuestionName = "What is something you liked about this class?",
                            Rating = -1,
                            TextField = "I really liked the fact that this class focused more on the quality of code than the quantity"
                        },
                        new
                        {
                            Id = 4,
                            QuestionName = "What is something that we can improve about this class",
                            Rating = -1,
                            TextField = "N/A"
                        });
                });

            modelBuilder.Entity("StudentVoice.Domain.Entities.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Class")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Class");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime>("ExperationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ExpirationDate");

                    b.Property<int>("Likes")
                        .HasColumnType("int")
                        .HasColumnName("Likes");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<string>("Professor")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Professor");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("Rating");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status");

                    b.Property<string>("Subject")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Subject");

                    b.HasKey("Id");

                    b.ToTable("Surveys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Class = "I",
                            Date = new DateTime(2022, 7, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            ExperationDate = new DateTime(2022, 7, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            Likes = 34,
                            Name = "Survey 1",
                            Professor = "Alex",
                            Rating = 5,
                            Status = "Completed",
                            Subject = "Mate"
                        },
                        new
                        {
                            Id = 2,
                            Class = "II",
                            Date = new DateTime(2022, 7, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            ExperationDate = new DateTime(2022, 7, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            Likes = 23,
                            Name = "Survey 2",
                            Professor = "Cosmin",
                            Rating = 4,
                            Status = "Completed",
                            Subject = "Mate"
                        },
                        new
                        {
                            Id = 3,
                            Class = "II",
                            Date = new DateTime(2022, 7, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            ExperationDate = new DateTime(2022, 7, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            Likes = 23,
                            Name = "Survey 2",
                            Professor = "Cosmin",
                            Rating = 4,
                            Status = "Uncompleted",
                            Subject = "Info"
                        });
                });

            modelBuilder.Entity("StudentVoice.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("LastName");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Password");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PhoneNumber");

                    b.Property<bool>("isAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("isAdmin");

                    b.Property<bool>("isBanned")
                        .HasColumnType("bit")
                        .HasColumnName("isBanned");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "viorel@gmail.com",
                            FirstName = "Viorel",
                            LastName = "Raul",
                            Password = "1234",
                            PhoneNumber = "02320234",
                            isAdmin = false,
                            isBanned = false
                        },
                        new
                        {
                            Id = 2,
                            Email = "cosmin@gmail.com",
                            FirstName = "Cosmin",
                            LastName = "QQQ",
                            Password = "34252",
                            PhoneNumber = "0rrwrt54",
                            isAdmin = false,
                            isBanned = false
                        },
                        new
                        {
                            Id = 3,
                            Email = "andreiRotar@admin.gmail.com",
                            FirstName = "Andrei",
                            LastName = "Rotar",
                            Password = "sgsdsjeere",
                            PhoneNumber = "0rrwrt54",
                            isAdmin = true,
                            isBanned = false
                        },
                        new
                        {
                            Id = 4,
                            Email = "sarah.ionescu@gmail.com",
                            FirstName = "Sarah",
                            LastName = "Ionescu",
                            Password = "sgsdsjeere",
                            PhoneNumber = "0rrwrt54",
                            isAdmin = false,
                            isBanned = true
                        });
                });

            modelBuilder.Entity("SurveyUser", b =>
                {
                    b.Property<int>("SurveysId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("SurveysId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("SurveyUser");

                    b.HasData(
                        new
                        {
                            SurveysId = 1,
                            UsersId = 1
                        });
                });

            modelBuilder.Entity("StudentVoice.Domain.Entities.Notification", b =>
                {
                    b.HasOne("StudentVoice.Domain.Entities.User", null)
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("StudentVoice.Domain.Entities.Question", b =>
                {
                    b.HasOne("StudentVoice.Domain.Entities.Survey", null)
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId");
                });

            modelBuilder.Entity("SurveyUser", b =>
                {
                    b.HasOne("StudentVoice.Domain.Entities.Survey", null)
                        .WithMany()
                        .HasForeignKey("SurveysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentVoice.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentVoice.Domain.Entities.Survey", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("StudentVoice.Domain.Entities.User", b =>
                {
                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
